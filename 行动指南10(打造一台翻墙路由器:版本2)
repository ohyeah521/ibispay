打造一台翻墙路由器(版本2)

凡是连上wifi的手机电脑，无需任何设置，都能自动翻墙。

版本2路由配置：ShadowSocks-libev + ChinaDNS + iptable + redsocks2
=========================
一：
首先路由器型号需要在openwrt列表中：http://wiki.openwrt.org/toh/start。(可以ctrl+F搜索匹配型号)
如果没有可以买一台，能刷openwrt系统的就行。
openwrt系统的下载地址在https://downloads.openwrt.org

淘宝上"华为HG255D"只要45块钱左右就能买到，
文中用的是"网件NETGEAR 3700v4"，家庭级不到300块，
如果是小公司可以用神器"思科Linksys WRT1900AC"，淘宝上1700左右，能带100个机器。

二：网件WNDR3700v4刷机

1.下载固件
https://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/nand/openwrt-ar71xx-nand-wndr3700v4-ubi-factory.img

访问192.168.1.1，在固件升级中上传openwrt-ar71xx-nand-wndr3700v4-ubi-factory.img
等待一会儿，勿断电。
好了之后打开wifi开关，连上openwrt，访问192.168.1.1.
设置路由密码，选中Allow remote hosts to connect to local SSH forwarded ports
设置下wifi密码，刷机成功。


三：然后需要一台国外的服务器，可以参考以下几个选择：

locvps.com
(4分：500G流量／速度比较稳定／机器少，换机器不方便／38元/优惠码：vpser)

linode.com
(4分：2000G流量／每月只有前10个G速度稳定／换机器方便／60元）

diahosting.com
(4分：200G流量／速度稳定，内存太少，适合连ssh／换机器不方便／70元）

digitalocean.com
(3.5分：1000G流量／速度不太稳定／换机器方便／30元）

vultr.com
(3分：1000G流量／速度不太稳定／机房多，换机器方便／系统问题较多/30元)

文中所用服务器系统是CentOS。


四：服务器端安装shadowsocks

1.CentOS6安装shadowsocks

yum install m2crypto python-setuptools
easy_install pip
pip install shadowsocks

# 修改配置 vi /etc/shadowsocks.json

{
    "server":"0.0.0.0",
    "server_port":7236,
    "local_address": "127.0.0.1",
    "local_port":1080,
    "password":"你的密码",
    "timeout":300,
    "method":"rc4-md5",
    "fast_open": false,
    "workers": 1
}

＃保存退出

2.centos后台运行shadowsocks:

# 若未安装supervisor,安装
yum install python-setuptools
easy_install supervisor

# 创建默认配置：
echo_supervisord_conf > /etc/supervisord.conf

vi /etc/supervisord.conf
# 在默认配置文件后添加：
[program:shadowsocks]
command=ssserver -c /etc/shadowsocks.json
autostart=true
autorestart=true
user=nobody

# 最后启动就行了：
supervisord

# 更新重启：
pip install --upgrade shadowsocks
supervisorctl restart shadowsocks

(参考 https://github.com/clowwindy/shadowsocks/wiki/%E7%94%A8-Supervisor-%E8%BF%90%E8%A1%8C-Shadowsocks)


五：路由器安装ShadowSocks-libev
具体方案：ShadowSocks-libev + ChinaDNS + iptable + redsocks2

1.下载安装包
shadowsocks: http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/
libpolarssl: http://sourceforge.net/projects/openwrt-dist/files/depends-libs/
chinaDNS: http://sourceforge.net/projects/chinadns/files/dist/
这里注意，一定要下载路由器cpu型号对应的文件！3700v4请选择ar71xx
型号列表：https://downloads.openwrt.org/snapshots/trunk/
比如linksys wrt1900ac的cpu类型就不在官方列表中(wrt1900ac请参考行动指南11).

若需要自己编译安装包，参考以下步骤，不需要就直接跳到第2步。

# 自己在CentOS下编译安装包
# 安装依赖
yum update
sudo yum groupinstall "Development Tools"

# 添加一个user用户
adduser user
cd /home/user

# 下载openwrt源码并赋予文件夹权限
# 注意选择cpu类型对应源码 https://downloads.openwrt.org/snapshots/trunk/
git clone git://git.openwrt.org/openwrt.git
sudo chmod -R 777 openwrt

# At OpenWRT build root,下载shadowsocks-libev源码
cd openwrt
pushd package
git clone https://github.com/madeye/shadowsocks-libev.git
git clone https://github.com/clowwindy/ChinaDNS-C.git
popd

# 更新feeds
./scripts/feeds update -a
./scripts/feeds install -a   
# 编译可能出现以下错误：
# Build dependency: Please install ncurses. (Missing libncurses.so or ncurses.h)
# Build dependency: Please install zlib. (Missing libz.so or zlib.h)
# 则安装：yum install ncurses-devel zlib-devel
# 另外需要权限则在／home下赋予文件夹权限 sudo chmod -R 777 user
su user
make defconfig


# 编译要用到的工具和库(时间略长，20核机器大概半小时)
su root
make prereq && make tools/install && make toolchain/install

# 按m选中Network/ChinaDNS
# 按m选中Network/shadowsocks-libev-polarssl
make menuconfig

# Build the package
make -j V=99 package/shadowsocks-libev/openwrt/compile
make -j V=99 package/ChinaDNS-C/openwrt/compile

# 文件位置在 openwrt/bin/...


2.安装到路由器

# 用sftp客户端上传libpolarssl、ChinaDNS-C、shadowsocks-libev-polarssl 3个ipk包到路由器/tmp 目录
# 若未开启sftp，先安装sftp，再上传
ssh root@192.168.1.1
opkg update
opkg install vsftpd openssh-sftp-server
/etc/init.d/vsftpd enable
/etc/init.d/vsftpd start

# 安装中文包，然后在网页界面系统设置中切换中文
opkg install luci-i18n-chinese

# 注意版本号可能和文中不同
cd /tmp
opkg install shadowsocks-libev-polarssl_1.4.8-1_ar71xx.ipk 
opkg install libpolarssl_1.3.8-1_ar71xx.ipk
opkg install ChinaDNS-C_1.1.7_ar71xx.ipk


# 通过vi /etc/shadowsocks.json打开后，编辑

{
    "server":"服务器ip",
    "server_port":7236,
    "local_port":1080,
    "password":"你的密码",
    "timeout":300,
    "method":"rc4-md5"
}

# 测试，在浏览器配置类似 SwichySharp 的插件或系统下设置 Socks5 代理测试 ShadowSocks 是否正常运行
# 浏览器代理地址192.168.1.1，端口1080
ss-local -c /etc/shadowsocks.json 


3.翻墙成功了，但还需要手动设置代理，用ipset配合redsocks2实现路由器下所有设备自动流量分流。

opkg update
opkg install iptables-mod-nat-extra
opkg install libevent2

# redsocks2能够智能判断是否需要使用socks5代理，如果网站可以直接连接则直接连接，否则使用shadowsocks进行连接，比gfwlist还智能。redsocks2 ar71xx版下载地址：https://github.com/cooerson/redsocks/releases/download/release-0.5.1/redsocks2

# 上传redsock2到/usr/bin
chmod +x /usr/bin/

# 编辑 vi /etc/redsocks2.conf
# 复制以下内容
base {
    log_debug = off;
    log_info = off;
    daemon = on;
    redirector= iptables;
}
redsocks {                                                                      
    local_ip = 192.168.1.1;                                                         
    local_port = 1081;                                                              
    ip = 192.168.1.1;                                                               
    port = 1080;                                                                    
    type = socks5;                                                                  
    autoproxy = 1;                                                                  
} 
# 保存退出

# 编辑 vi /etc/init.d/shadowsocks
# 复制以下内容

#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2011 OpenWrt.org

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

start() {
    echo starting ss-local...
    service_start /usr/bin/ss-local -c /etc/shadowsocks.json

    echo starting redsocks2...
    /usr/bin/redsocks2 -c /etc/redsocks2.conf

    echo loading redsocks2 firewall rules...
    load_firewall

    echo done.
}

stop() {
    echo stopping ss-local...
    service_stop /usr/bin/ss-local

    echo stopping redsocks2...
    killall -9 redsocks2

    echo flushing redsocks2 firewall rules...
    flush_firewall

    echo done.
}

load_firewall() {
    # create a new chain named REDSOCKS
    iptables -t nat -N REDSOCKS

    # Ignore LANs IP address
    iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN
    iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN
    iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN
    iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN
    iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN
    iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN
    iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN
    iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN

    # Anything else should be redirected to redsocks's local port
    iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 1081

    # Apply the rules
    iptables -t nat -I zone_lan_prerouting -j REDSOCKS
}

flush_firewall() {
    iptables -t nat -F REDSOCKS
    sleep 1
    iptables -t nat -D zone_lan_prerouting -j REDSOCKS
    iptables -t nat -X REDSOCKS
}

# 保存退出

4.启动shadowsocks

/etc/init.d/chinadns start          # 运行chinadns
/etc/init.d/chinadns enable         # 开机启动
chmod +x /etc/init.d/shadowsocks    # 添加执行权限
/etc/init.d/shadowsocks start       # 运行shadowsocks
/etc/init.d/shadowsocks enable      # 开机启动


重启路由器，大功告成！

/etc/init.d/shadowsocks stop # 关闭shadowsocks
/etc/init.d/shadowsocks disable # 取消开机启动



=========================
参考文章：
http://www.jianshu.com/p/4800eec60516
https://www.gitbook.io/book/softwaredownload/openwrt-fanqiang
http://blog.berry10086.com/Tech/Openwrt/openwrt-shadowsocks-ipset/
http://www.shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
共享：github.com/FollowYourPassion
邮箱：cooerson1@gmail.com
微信：cooerson

2014.10.19

