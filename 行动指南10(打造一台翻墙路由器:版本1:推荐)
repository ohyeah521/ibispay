打造一台翻墙路由器

凡是连上wifi的手机电脑，无需任何设置，都能自动翻墙。

路由器配置方案：ShadowSocks-libev + ChinaDNS + iptable
=========================
一：
首先路由器型号需要在openwrt列表中：http://wiki.openwrt.org/toh/start。(可以ctrl+F搜索匹配型号)
如果没有可以买一台，能刷openwrt系统的就行。
openwrt系统的下载地址在https://downloads.openwrt.org

淘宝上"华为HG255D"只要45块钱左右就能买到，
文中用的是"网件NETGEAR 3700v4"，家庭级不到300块，
如果是小公司可以用神器"思科Linksys WRT1900AC"，淘宝上1700左右，能带100个机器。

二：网件WNDR3700v4刷机

1.下载固件
https://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/nand/openwrt-ar71xx-nand-wndr3700v4-ubi-factory.img

访问192.168.1.1，在固件升级中上传openwrt-ar71xx-nand-wndr3700v4-ubi-factory.img
等待一会儿，勿断电。
好了之后打开wifi开关，连上openwrt，访问192.168.1.1.
设置路由密码，选中Allow remote hosts to connect to local SSH forwarded ports
设置下wifi密码，刷机成功。


三：然后需要一台国外的服务器，可以参考以下几个选择：

locvps.com
(4分：500G流量／速度比较稳定／机器少，换机器不方便／38元/优惠码：vpser)

diahosting.com
(4分：200G流量／速度稳定，内存太少，适合连ssh／换机器不方便／70元）

linode.com
(4分：2000G流量／每月只有前10个G速度稳定／换机器方便／60元）

digitalocean.com
(3.5分：1000G流量／速度不太稳定／换机器方便／30元）

vultr.com
(3分：1000G流量／速度不太稳定／机房多，换机器方便／系统问题较多/30元)

文中所用服务器系统是CentOS。


四：服务器端安装shadowsocks

1.CentOS6安装shadowsocks

yum install m2crypto python-setuptools
easy_install pip
pip install shadowsocks

# 修改配置 vi /etc/shadowsocks.json

{
    "server":"0.0.0.0",
    "server_port":7236,
    "local_address": "127.0.0.1",
    "local_port":1080,
    "password":"你的密码",
    "timeout":300,
    "method":"rc4-md5",
    "fast_open": false,
    "workers": 1
}

＃保存退出

2.centos后台运行shadowsocks:

# 若未安装supervisor,安装
yum install python-setuptools
easy_install supervisor

# 创建默认配置：
echo_supervisord_conf > /etc/supervisord.conf

vi /etc/supervisord.conf
# 在默认配置文件后添加：
[program:shadowsocks]
command=ssserver -c /etc/shadowsocks.json
autostart=true
autorestart=true
user=nobody

# 最后启动就行了：
supervisord

# 更新重启：
pip install --upgrade shadowsocks
supervisorctl restart shadowsocks

(参考 https://github.com/clowwindy/shadowsocks/wiki/%E7%94%A8-Supervisor-%E8%BF%90%E8%A1%8C-Shadowsocks)


五：路由器安装ShadowSocks-libev
具体方案：ShadowSocks-libev + ChinaDNS + iptable

1.下载安装包
shadowsocks: http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/
libpolarssl: http://sourceforge.net/projects/openwrt-dist/files/depends-libs/
chinaDNS: http://sourceforge.net/projects/chinadns/files/dist/
这里注意，一定要下载路由器cpu型号对应的文件！3700v4请选择ar71xx
型号列表：https://downloads.openwrt.org/snapshots/trunk/
比如linksys wrt1900ac的cpu类型就不在官方列表中(wrt1900ac请参考行动指南11).

# 自己在CentOS下编译安装包
# 安装依赖
yum update
sudo yum groupinstall "Development Tools"

# 添加一个user用户
adduser user
cd /home/user

# 下载openwrt源码并赋予文件夹权限
# 注意选择cpu类型对应源码 https://downloads.openwrt.org/snapshots/trunk/
git clone git://git.openwrt.org/openwrt.git
sudo chmod -R 777 openwrt

# At OpenWRT build root,下载shadowsocks-libev源码
cd openwrt
pushd package
git clone https://github.com/madeye/shadowsocks-libev.git
git clone https://github.com/clowwindy/ChinaDNS-C.git
popd

# 更新feeds
./scripts/feeds update -a
./scripts/feeds install -a   
# 编译可能出现以下错误：
# Build dependency: Please install ncurses. (Missing libncurses.so or ncurses.h)
# Build dependency: Please install zlib. (Missing libz.so or zlib.h)
# 则安装：yum install ncurses-devel zlib-devel
# 另外需要权限则在／home下赋予文件夹权限 sudo chmod -R 777 user
su user
make defconfig


# 编译要用到的工具和库(时间略长，20核机器大概半小时)
su root
make prereq && make tools/install && make toolchain/install

# 按m选中Network/ChinaDNS
# 按m选中Network/shadowsocks-libev-polarssl
make menuconfig

# Build the package
make -j V=99 package/shadowsocks-libev/openwrt/compile
make -j V=99 package/ChinaDNS-C/openwrt/compile

# 文件位置在 openwrt/bin/...


2.安装到路由器

# 用sftp客户端上传libpolarssl、ChinaDNS-C、shadowsocks-libev-polarssl 3个ipk包到路由器/tmp 目录
# 若未开启sftp，先安装sftp，再上传
ssh root@192.168.1.1
opkg update
opkg install vsftpd openssh-sftp-server
/etc/init.d/vsftpd enable
/etc/init.d/vsftpd start

# 安装中文包，然后在网页界面系统设置中切换中文
opkg install luci-i18n-chinese

cd /tmp
opkg install shadowsocks-libev-polarssl_1.4.8_ar71xx.ipk 
opkg install libpolarssl_1.3.8-1_ar71xx.ipk
opkg install ChinaDNS-C_1.0.0_ar71xx.ipk

# 通过vi /etc/shadowsocks.json打开后，编辑

{
    "server":"服务器ip",
    "server_port":7236,
    "local_port":1080,
    "password":"你的密码",
    "timeout":300,
    "method":"rc4-md5"
}

# 测试，在浏览器配置类似 SwichySharp 的插件或系统下设置 Socks5 代理测试 ShadowSocks 是否正常运行
# 浏览器代理地址192.168.1.1，端口1080
ss-local -c /etc/shadowsocks.json 


3.翻墙成功了，但还需要手动设置代理，用ipset配合dnsmasq实现路由器下所有设备自动流量分流。

# 配置 iptable 前，先检查下自己的 OpenWRT 中是否已经安装iptables-mod-nat-extra，若没有，先安装。

opkg update
opkg install iptables-mod-nat-extra

# 安装后继续
cd /usr/bin
touch shadowsocks-firewall

# 通过vi shadowsocks-firewall命令配置文件
# 将下列内容复制进去：

#!/bin/sh

#create a new chain named SHADOWSOCKS
iptables -t nat -N SHADOWSOCKS

# Ignore your shadowsocks server's addresses
# It's very IMPORTANT, just be careful.

iptables -t nat -A SHADOWSOCKS -d 173.230.155.72 -j RETURN

# Ignore LANs IP address
iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN

# Ignore Asia IP address
iptables -t nat -A SHADOWSOCKS -d 1.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 14.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 27.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 36.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 39.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 42.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 49.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 58.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 59.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 60.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 61.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 101.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 103.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 106.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 110.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 111.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 112.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 113.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 114.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 115.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 116.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 117.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 118.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 119.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 120.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 121.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 122.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 123.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 124.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 125.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 126.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 175.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 180.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 182.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 183.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 202.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 203.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 210.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 211.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 218.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 219.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 220.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 221.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 222.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 223.0.0.0/8 -j RETURN

# Anything else should be redirected to shadowsocks's local port
iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 1080 
# Apply the rules
iptables -t nat -A PREROUTING -p tcp -j SHADOWSOCKS

# 保存退出，chmod +x shadowsocks-firewall给其运行权限。
# 注意：服务器地址"173.230.155.72"换成自己的服务器地址,local_port:1080


# 修改启动配置vi /etc/init.d/shadowsocks

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

CONFIG=/etc/shadowsocks.json

start() {                                                                       

        service_start /usr/bin/ss-redir -c $CONFIG                              

        service_start /usr/bin/ss-tunnel -c $CONFIG -l 8964 -L 8.8.8.8:53 -u    

        /usr/bin/shadowsocks-firewall                                           

}                                                                                                                                                   



stop() {                                                                        

    service_stop /usr/bin/ss-redir                                              

    service_stop /usr/bin/ss-tunnel                                             

    /etc/init.d/firewall restart                                                

}


# 保存退出

4.启动shadowsocks

/etc/init.d/chinadns start          # 运行chinadns
/etc/init.d/chinadns enable         # 开机启动
chmod +x /etc/init.d/shadowsocks    # 添加执行权限
/etc/init.d/shadowsocks start       # 运行shadowsocks
/etc/init.d/shadowsocks enable      # 开机启动


重启路由器，大功告成！

/etc/init.d/shadowsocks stop # 关闭shadowsocks
/etc/init.d/shadowsocks disable # 取消开机启动



=========================
参考文章：
http://www.jianshu.com/p/4800eec60516
https://www.gitbook.io/book/softwaredownload/openwrt-fanqiang
http://blog.berry10086.com/Tech/Openwrt/openwrt-shadowsocks-ipset/


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
共享：github.com/FollowYourPassion
邮箱：cooerson1@gmail.com
微信：cooerson

2014.10.10

