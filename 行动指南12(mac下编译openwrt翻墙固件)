mac下编译openwrt固件

1.安装xcode
2.安装command line tool
xcode-select --install
3. 安装包管理工具homebrew
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
4. 安装编译工具
brew install coreutils e2fsprogs ossp-uuid asciidoc binutils fastjar flex intltool openssl subversion ruby sdcc gettext libxslt bison gawk autoconf wget findutils xz

brew install gnu-getopt gnu-tar
这里brew 会提示原系统已经有需要自己添加环境变量，按照提示添加即可，我采用的是替换的方式：
cd /usr/bin
mv getopt getopt.bak
ln -s /usr/local/Cellar/gnu-getopt/1.1.5/bin/getopt /usr/bin
mv tar tar.bak
ln -s /usr/local/Cellar/gnu-tar/1.28/bin/gtar /usr/bin

看起来这样
执行 ls -l getopt 和 ls -l tar分别得到：
lrwxr-xr-x  1 root  wheel  45 12 25 12:32 getopt -> /usr/local/Cellar/gnu-getopt/1.1.5/bin/getopt
lrwxr-xr-x  1 root  wheel  39 12 25 12:46 tar -> /usr/local/Cellar/gnu-tar/1.28/bin/gtar
这样在下面的依赖测试make defconfig 就没错误了



5. 部署OpenWrt代码
Mac用的文件系统是不区分大小写的 但是openwrt要求用大小写的文件系统：
hdiutil create -size 10g -fs "Case-sensitive HFS+" -volname OpenWrt OpenWrt.dmg
hdiutil attach OpenWrt.dmg

这样就新建了一个支持大小写的文件系统
开始部署代码：

cd /Volumes/OpenWrt
git clone git://git.openwrt.org/14.07/openwrt.git
cd /Volumes/OpenWrt/openwrt/
pushd package
git clone https://github.com/madeye/shadowsocks-libev.git
git clone https://github.com/clowwindy/ChinaDNS-C.git
popd
./scripts/feeds update -a
./scripts/feeds install -a  

sudo chmod -R 777 /Volumes/OpenWrt/openwrt
make defconfig
make prereq && make tools/install && make toolchain/install



6.覆盖配置文件
在编译目录下新建一个名为files的目录，openwrt在编译的时候，会把files文件夹里的文件编译到固件的根目录

配置文件目录树像这样：

├── etc
│   ├── config
│   │   ├── network
│   │   ├── wireless
│   │   └── firewall
│   ├── init.d
│   │   └── shadowsocks
│   ├── shadow
│   └── shadowsocks.json
└── usr
    └── bin
        └── shadowsocks-firewall
＃具体代码
＃可以从现有翻墙路由器拷贝配置文件
mkdir -p files/etc/config
scp root@192.168.1.1:/etc/config/network files/etc/config/
scp root@192.168.1.1:/etc/config/wireless files/etc/config/
scp root@192.168.1.1:/etc/config/firewall files/etc/config/
scp root@192.168.1.1:/etc/shadowsocks.json files/etc
mkdir -p files/usr/bin
scp root@192.168.1.1:/usr/bin/shadowsocks-firewall files/usr/bin
mkdir -p files/etc/init.d
scp root@192.168.1.1:/etc/init.d/shadowsocks files/etc/init.d
scp root@192.168.1.1:/etc/shadow files/etc



7.选取需要的package后开始编译

sudo chmod -R 777 /Volumes/OpenWrt/openwrt/
make menuconfig

其中，menuconfig要添加一些必备组件，如：tc、luci、usb挂载、一键复位/无线、QoS/HTB，都在menucofnig中选择，y表示编译到固件中，M是编译但是不编译进固件。

1.先选择路由器目标型号

2.
Network—>ChinaDNS
Network—>shadowsocks-libev-polarssl

3.添加luci
 LuCI—>Collections—– <*> luci
 LuCI—>Translations—- <*> luci-i18n-chinese
 LuCI—>Applications —> <*>luci-app-ddns
 LuCI—>Applications —> <*>luci-app-qos
 LuCI—>Applications —> <*>luci-app-upnp.
4.添加USB挂载
 Base system —> <*>block-mount
5.添加硬盘格式支持
 Kernel modules —> Filesystems —> <*> kmod-fs-ext4
6.添加UTF8编码
 Kernel modules —> Native Language Support —> <*> kmod-nls-utf8
7.添加USB扩展支持
 Kernel modules —> USB Support —> <*> kmod-usb-storage-extras.
8.添加自动挂载工具
 Utilities —> Filesystem —> <*> badblocks
9.添加复位键支持
 Utilities —> <*> restorefactory
10.添加一键开关无线
 Utilities —> <*> wifitoggle
 
在Kernel Modules->Network Support中选择knomd-tun 保存退出

make kernel_menuconfig

在Networking Support->Networking options->QoS中选择Hierarchical Token Bucket (HTB) 保存退出


make V=s







