打造一台企业级翻墙路由

本文使用神机linksys wrt1900ac，淘宝价格1600左右,可以带100台机器。

1.下载固件，刷系统。
固件地址：https://github.com/Chadster766/McWRT/releases/download/v1.0.1/openwrt-armadaxp--jffs2-128k.img

2.服务器端安装shadowsocks

(参考"行动指南10" 或 https://github.com/clowwindy/shadowsocks)

3.由于1900ac的cpu比较稀有，所以需要的ipk安装包都需要自己编译。
可以直接下载编译好的文件，忽略第3步、跳到第4步。
下载地址，4个ipk包 https://github.com/cooerson/shadowsocks-libev/releases/tag/v1.4.8

# 下面是自己编译的方法，可以用linode20核的机器，不然编译很慢
# 安装依赖
yum update
sudo yum groupinstall "Development Tools"

# 添加一个user用户
adduser user
cd /home/user

# 下载wrt1900ac源码
git clone https://github.com/Chadster766/McWRT.git

# At build root,下载shadowsocks-libev、polarssl、ChinaDNS源码
cd McWRT/attitude_adjustment/
pushd package
git clone https://github.com/madeye/shadowsocks-libev.git
git clone https://github.com/clowwindy/ChinaDNS-C.git
popd

# 更新feeds
./scripts/feeds update -a
./scripts/feeds install -a    
# 编译可能出现以下错误：
# Build dependency: Please install ncurses. (Missing libncurses.so or ncurses.h)
# Build dependency: Please install zlib. (Missing libz.so or zlib.h)
# 则安装：yum install ncurses-devel zlib-devel
# 另外需要权限则在／home下赋予文件夹权限 sudo chmod -R 777 user
su user
make defconfig

# 编译要用到的工具和库(时间略长，20核机器大概半小时)
su root
make prereq && make tools/install && make toolchain/install

# 按m选中Network/ChinaDNS
# 按m选中Network/shadowsocks-libev-polarssl
make menuconfig

# Build the package
make -j V=99 package/shadowsocks-libev/openwrt/compile
make -j V=99 package/ChinaDNS-C/openwrt/compile

# 文件位置在/home/user/McWRT/attitude_adjustment/bin/armadaxp/packages


4.# 下载后，上传libpolarssl_1.2.5-1_armadaxp.ipk、ChinaDNS-C_1.1.7_armadaxp.ipk、
 shadowsocks-libev-polarssl_1.4.8_armadaxp.ipk到路由器/tmp
# ssh进入路由器192.168.200.1
cd /tmp
opkg install ChinaDNS-C_1.1.7_armadaxp.ipk
opkg install libpolarssl_1.2.5-1_armadaxp.ipk
opkg install shadowsocks-libev-polarssl_1.4.8_armadaxp.ipk
# 中文包安装后在系统设置中选择即可切换中文
opkg install luci-i18n-chinese_svn-r10528-1_armadaxp.ipk

# 通过vi /etc/shadowsocks.json打开后，编辑

{
    "server”:”服务器地址",
    "server_port":7236,
    "local_port":1080,
    "password”:”你的密码",  
    "timeout":300,
    "method":"aes-256-cfb"
}

# 保存退出

# 测试，在浏览器配置类似 SwichySharp 的插件或系统下设置 Socks5 代理测试 ShadowSocks 是否正常运行
# 浏览器代理地址192.168.1.1，端口1080
ss-local -c /etc/shadowsocks.json 

5.翻墙成功了，但还需要手动设置代理，用ipset配合dnsmasq实现路由器下所有设备自动流量分流。

# 配置 iptable 前，先检查下自己的 OpenWRT 中是否已经安装iptables-mod-nat-extra，若没有，先安装。

opkg update
opkg install iptables-mod-nat-extra

# 安装后继续
cd /usr/bin
touch shadowsocks-firewall

# 通过vi shadowsocks-firewall命令配置文件
# 将下列内容复制进去：

#!/bin/sh

#create a new chain named SHADOWSOCKS
iptables -t nat -N SHADOWSOCKS

# Ignore your shadowsocks server's addresses
# It's very IMPORTANT, just be careful.

iptables -t nat -A SHADOWSOCKS -d 173.230.155.72 -j RETURN

# Ignore LANs IP address
iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN

# Ignore Asia IP address
iptables -t nat -A SHADOWSOCKS -d 1.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 14.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 27.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 36.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 39.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 42.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 49.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 58.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 59.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 60.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 61.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 101.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 103.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 106.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 110.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 111.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 112.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 113.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 114.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 115.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 116.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 117.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 118.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 119.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 120.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 121.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 122.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 123.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 124.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 125.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 126.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 175.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 180.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 182.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 183.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 202.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 203.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 210.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 211.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 218.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 219.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 220.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 221.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 222.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 223.0.0.0/8 -j RETURN

# Anything else should be redirected to shadowsocks's local port
iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 1080 
# Apply the rules
iptables -t nat -A PREROUTING -p tcp -j SHADOWSOCKS

# 保存退出，chmod +x shadowsocks-firewall给其运行权限。
# 注意：服务器地址"173.230.155.72"换成自己的服务器地址,local_port:1080


# 修改启动配置vi /etc/init.d/shadowsocks

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1

CONFIG=/etc/shadowsocks.json

start() {
        service_start /usr/bin/ss-redir -c /etc/shadowsocks.json
        service_start /usr/bin/ss-tunnel -c /etc/shadowsocks.json -l 8964 -L 8.8.8.8:53 -u
        /usr/bin/shadowsocks-firewall
}

stop() {
    service_stop /usr/bin/ss-redir
    service_stop /usr/bin/ss-tunnel
    /etc/init.d/firewall restart
}

# 保存退出

6.启动shadowsocks

/etc/init.d/chinadns start                	# 运行chinadns
/etc/init.d/chinadns enable              	# 开机启动
chmod +x /etc/init.d/shadowsocks 		# 添加执行权限
/etc/init.d/shadowsocks start    		# 运行shadowsocks
/etc/init.d/shadowsocks enable   		# 开机启动


重启路由器，大功告成！

/etc/init.d/shadowsocks stop # 关闭shadowsocks
/etc/init.d/shadowsocks disable # 取消开机启动


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
共享：github.com/FollowYourPassion
邮箱：cooerson1@gmail.com
微信：cooerson

2014.10.12